Q) which of the below statement are true? choose 2 options : 
1)atomic is a keyword in java .
2) All atomic classes in java have get and set methods.
3)Atomic classes support lock-free thread-safe programming on single variables
4)AtomicDouble is an atomic class represents a double value that may be updated Automatically

The true statements are:
Atomic classes support lock-free thread-safe programming on single variables.
AtomicDouble is an atomic class that represents a double value that may be updated automatically.

====================================================================

which of the following are incorrect regrading inheritance ? 
1)the object is the Superclass of every other class 
2)constructor and instance initialization block get inherited to subclass
 3)static block cannot be inherited from its subclass 
 4)it is possible to access subclass members if we create an object of the superclass

The incorrect statement regarding inheritance is:
2)constructor and instance initialization block get inherited to subclass
3)Static block cannot be inherited from its subclass.

===========================================
identify the statements that are true or false ? 
1)Wrapper classes are not used to convert any data type into an object.
2)the wrapper classes are part of java.lang.package.
3)toString() method cannot be used to convert wrapper objects to String

1==>false 
2==>true
3==>false 

=======================
which oops concept of java is away of converting  real-world objects in terms of class and the oops attributes 
and their behaviors  in a single unit ?
1) Encapsulation, Abstraction 
2)Abstraction, Encapsulation
3)polymorphism, Encapsulation 
4)inheritance, Abstraction 
5)Encapsulation, Access Modifiers

The correct answer is:

Abstraction, Encapsulation

======================================================

package com.java.basics;

public abstract class ClassA{
	abstract void m1();
}

public class ClassB extends ClassA{

	@Override
private void m1() {
		// TODO Auto-generated method stub
		
	}
	}
	public class AbstractDemo {
public static void main(String[] args) {
	ClassB b = new ClassB();
	b.m1();
}
}

Ans 
Line 1 & line 2 will be given error 

===============================================

which of the following is correct regrading the interface ? 
1) an interface can be defined inside a method as a local member. 
2)the visibility of the interface method can be reduced while overriding it. 
3) variables defined inside the interface are static and final by default. 
4) private and protected modifiers for the variables cannot be defined in interfaces

The correct statements regarding interfaces are:

Variables defined inside the interface are static and final by default.
Private and protected modifiers for the variables cannot be defined in interfaces.

======================================================
how many objects will be created in the following ?  
String  i = new String ("Hello"); 
String m = new String("Hello"); 
String n="Hello";
 String o="Hello"; 
 options :1,4,3,2
 
 Ans 2 
 
 ===================================
 what will be the result if you have the following snippet ?
 int ++n = 100;
 System.out.println(++n); 
 
 1)100
 2)101
 3)Compilation error 
 4) None of these 
 
 Ans : The given code snippet will result in a compilation error.
 
 ===========================================
 
 public class ExceptionClass {
	
	public void startup() {
		try {
			System.out.println("try Block");
			throw new Exception();
		}catch (Exception e) {
			// TODO: handle exception
			System.out.println("Catch Block");
			System.exit(0);
		}finally {
			System.out.println("finally block");
		}
	}

	public static void main(String[] args) {
		new ExceptionClass().startup();
	}
}
 
 o/p ==> try Block
Catch Block

=============================
package com.java.basics;

public class TesterClass {
	static int x=19;
	public TesterClass() {
		System.out.println("value of x:" + this.x);
		TesterClass1();
		
	}
	public static void TesterClass1() {
		System.out.println(this.x);   // Line 2 note this keyword is not allowed the static block and static methods
	}
	
	public static void main(String[] args) {
		new TesterClass();
	}

}

Ans :- 
Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
	Cannot use this in a static context
	
=================================================

import java.util.ArrayList;
import java.util.List;

public class QuestionSet {
	public static void main(String[] args) {
		QuestionSet qs = new QuestionSet();
		List<Integer> set1 = new ArrayList<>();
		set1.add(70);
		set1.add(80);
		qs.m1(set1);
		
	}
	
	private void m1(List<?> set1) {
		m2(set1);
	}
	
	private <T> void m2(List<T> set1) {
		System.out.print(set1 +" ");
		set1.set(0, set1.get(1));
		System.out.print(set1);
	}

}

Ans : -  [70, 80] [80, 80] 

============================================
public static void main(String[] args) {
		final int privatevalue ;
		privatevalue =20;
		int secValue =  privatevalue+20;
		privatevalue =secValue+30;
		System.out.println(privatevalue +" " + secValue);
	}

Ans:- Compile error 

===============================

public class DemoBlocks {

	static int i = demo();
	
	static {
		System.out.println(i+" ");
	}
		
	DemoBlocks(){
		  System.out.println("Inside Constructor");
	}
	
	static int demo() {
		System.out.println("inside demo method");
		return 100;
	}
	
	public static void main(String[] args) {
		System.out.println("inside main Method");
	}
	
}
Ans : --- inside demo method
           100 
          inside main Method
          
===================================          


public class DemoBlock1 {

	public void demoMethod() {
		System.out.println("Method...");
	}
	public DemoBlock1() {
		System.out.println("Constructor..");
	}{
		System.out.println("instance block");
	}
	static {
		System.out.println("Static block...");
	}
	public static void main(String[] args) {
		DemoBlock1 dm = new DemoBlock1();
		dm.demoMethod();
	}
}

Ans :--
Static block...
instance block
Constructor..
Method...

=========================================

what would be the expected output if you run the following snippet ? 
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE", Locale.ENGLISH);
System.out.println(formatter.format(LocalDateTime.now()));

Options: 1)Wednesday 2)Fri 3)November 4)Sept

Ans : -  Wednesday 

=============================

public static void main(String[] args) {
		int age =25 ;
		int ganePlayed =45 ;
		switch(ganePlayed) {
		case 45: System.out.println("Cricket");
		case ganePlayed:System.out.println("ODI Test T20");
		}
	}

o/p --> 	Unresolved compilation problem: 
	case expressions must be constant expressions
	
=======================================================================

	pick the jShell commands to the correct statements 
	1)jshell-v:shows little description after the user output
	2)?/:display the list of variables along with values
	3)/open<file-path>: to view the snippet from the text file location 
	4)/var:list Jshell commands

o/p :--  1 & 3 

=============================================================

public class TesterAssertion {
public static void main(String[] args) {
	int count =0;
	try {
		count +=100;
		assert count - 100 < 100 :count +=100;
	} catch (Error e) {
		// TODO: handle exception
		count -= 100;
	}
	System.out.println(count);
}
}

o/p:- 100 

=======================================================

choose wrong statement 

1)boolean b=2<4;
2)boolean a=1;
3)boolean x = 4>3 >true:false;
4)boolean b = false ;
boolean b1=(b==true || false)? System.out.println("true"):System.out.println("False");

o/p: 2  "This statement is incorrect. In Java, you cannot directly assign an 
integer value (1 in this case) to a boolean variable. This will result in a compilation error."

=========================================================================
 public static void main(String[] args) {
	 int a[] = new int[] {0,1,2,3,4,5,6,7,8,9,10};
	 int i = 8;
	 
	 i = a[a[i]/2];
	 System.out.println(a[i]/2);
}
 
 o/p== 2 
 
 =======================================
 choose correct options
 
public enum Vechile {
	DIESEL, ELECTRIC, PERTOL, HYBRID
	int mileageDetails = 17;

}
public class EnumTest {

	public static void main(String[] args) {
		Vechile v = Vechile.ELECTRIC;
		System.out.println(v+","+v.mileageDetails);
	}
}
options : 1) NO output 2)Runtime Exception 3) Compilation Error 4)ELECTRIC, 17


O/p--> ELECTRIC, 17 

============================================================

public class DemoBloks2 {
	
	private DemoBloks2(int i) {
		System.out.println(i);
	}
	
	public static DemoBloks2() {  // constructor cannot made as a static keyword 
		System.out.println(100);
	}
	
	public static void main(String[] args) {
		DemoBloks2 dm = new DemoBloks2(200);
	}

}


o/p -->  line 2 Compilation error 

=============================================================
what is output of code snippet ?
public interface InterfaceA {

	int x;
	void m1();
}


public class InterfaceAImpl implements InterfaceA{

	public static void main(String[] args) {
		InterfaceAImpl ifa = new InterfaceAImpl();
           ifa.m1();
	}

	 int x=20;
	public void m1() {
		// TODO Auto-generated method stub
		System.out.println(x+" ");
      System.out.println("Hello ");		
	}

}

o/p --> will return compile error  i.e x is not initilize  in interface

===============================================================================

	
	for(int j=0 ; j < 10 ; j++) {
		if(j % 2==0) {
			System.out.print(j+" ");
			continue;
		}
		System.out.print(j+" ");
	}
	
	o/p--->  0 1 2 3 4 5 6 7 8 9  
	
=================================================


public class Employee {
	
	private int id ;
	private String name ;
	Employee(int id,String name){
		this.id=id;
		this.name=name;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	

}

public class EmployeeTester {

	public static void main(String[] args) {
		
		Employee e[] = new Employee[2];
		e[0] = new Employee(101, "Vijay");
		e[1]= new Employee(102, "Ajay");
		for(int i=0 ; i<e.length;i++) {
			System.out.println(e[i]);
		}

	}

}

o/p ---->  	com.java.basics.Employee@3d012ddd
com.java.basics.Employee@626b2d4a


======================================================

identify whether the statement are true or false 

Method overriding is a combination of both inheritance and polymorphsim in java 
interfaces are inherited from Object class

Ans  :-- True False

=======================================================
which are true abot enum in java ? 

1)Enum types cannot extend a class 
2)Enum index start with one 
3)Enum cannot have any modifiers
4)All Enums impilicity extends the java.lang.Enum
5)Enums are not  a type-safe

Ans :-- 1)Enum types cannot extend a class  , 4)All Enums impilicity extends the java.lang.Enum

=========================================================================
public class FloatPratice {

	public static void main(String[] args) {
	
		
		  float d=8.2/2; System.out.println(d);
		 
		
		float b=18.2F/2;
		System.out.println(b);
		
		int a=17;
		float c = a/2;
		float e = (float)a/2;
		System.out.println(c+" "+e);

	}

}

Ans :--  Compile error , 9.1 ,8.0 ,8.5 

================================================
identify the collection that 
1) Maintain insertion order
2)Does not allow duplicates 

options: a)List,Set b)Set c)List d)Set,List 

Ans :--> Set

=================================================
	int k ;
	for(k=1; k<=12; k+=2) {
		if(k==8){
			System.out.println(k);
			break;
		}
	}
	
Ans : No output 

============================================================

public record Student(int studentId,String studentName,String studentDept , int studentScore) {
       
	static int level ;
	public Student {
		if(studentScore >=90 && studentScore<=100 )
			level=1;
		else if(studentScore <= 89 &&studentScore>=80)
			level=2;
		else if (studentScore<=79 && studentScore >=70)
			level = 3;
		else
			level=4;
		
	}
}
public class RecordStudentClass {

	public static void main(String[] args) {
		
		Student s1 = new Student(111,"Alia","ETA" ,89);
		System.out.println(s1.studentId()+" "+s1.studentName()+" "+s1.studentDept()+""+s1.studentScore());
		System.out.println(""+Student.level);
		Student s2 = new Student(111,"Alia","ETA" ,89);
		
		System.out.println(" "+s1.equals(s2));

	}

}


o/p: === 111 Alia ETA89 2 true

============================================
public abstract class ABCBank {

	private String bankName ;
	ABCBank(String bankName){
		this.bankName=bankName;
	}
	
	public String getBankBranchName() {
		return bankName;
	}
}


public class Branch extends ABCBank{
    Branch(){
    	super("ABC Bank - ECity");
    }
    public static void main(String[] args) {
		ABCBank bank = new Branch();
		System.out.println(bank.getBankBranchName());
	}
}

o/p-->  ABC Bank - ECity  

===================================================================



	


















	
 
 

